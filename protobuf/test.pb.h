// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_InitDefaults_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class Record;

// ===================================================================

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf_test.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static const Record* internal_default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  inline Record* New() const { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Record* other);
  void UnsafeMergeFrom(const Record& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::int64 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int64 value);
  void add_ids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_ids();

  // repeated string strings = 2;
  int strings_size() const;
  void clear_strings();
  static const int kStringsFieldNumber = 2;
  const ::std::string& strings(int index) const;
  ::std::string* mutable_strings(int index);
  void set_strings(int index, const ::std::string& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  ::std::string* add_strings();
  void add_strings(const ::std::string& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strings();

  // @@protoc_insertion_point(class_scope:protobuf_test.Record)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strings_;
  friend void  protobuf_InitDefaults_test_2eproto_impl();
  friend void  protobuf_AddDesc_test_2eproto_impl();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Record> Record_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// repeated int64 ids = 1;
inline int Record::ids_size() const {
  return ids_.size();
}
inline void Record::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int64 Record::ids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record.ids)
  return ids_.Get(index);
}
inline void Record::set_ids(int index, ::google::protobuf::int64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test.Record.ids)
}
inline void Record::add_ids(::google::protobuf::int64 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Record::ids() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Record::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record.ids)
  return &ids_;
}

// repeated string strings = 2;
inline int Record::strings_size() const {
  return strings_.size();
}
inline void Record::clear_strings() {
  strings_.Clear();
}
inline const ::std::string& Record::strings(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test.Record.strings)
  return strings_.Get(index);
}
inline ::std::string* Record::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test.Record.strings)
  return strings_.Mutable(index);
}
inline void Record::set_strings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuf_test.Record.strings)
  strings_.Mutable(index)->assign(value);
}
inline void Record::set_strings(int index, const char* value) {
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test.Record.strings)
}
inline void Record::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test.Record.strings)
}
inline ::std::string* Record::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:protobuf_test.Record.strings)
  return strings_.Add();
}
inline void Record::add_strings(const ::std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test.Record.strings)
}
inline void Record::add_strings(const char* value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test.Record.strings)
}
inline void Record::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test.Record.strings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Record::strings() const {
  // @@protoc_insertion_point(field_list:protobuf_test.Record.strings)
  return strings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Record::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test.Record.strings)
  return &strings_;
}

inline const Record* Record::internal_default_instance() {
  return &Record_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
